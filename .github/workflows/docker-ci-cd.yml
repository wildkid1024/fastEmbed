name: Docker CI/CD

# 触发条件：手动触发或标签推送
on:
  workflow_dispatch:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # 步骤2：设置Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤3：设置镜像标签作为环境变量
      - name: Set image tags
        id: set_tags
        run: |
          # 获取当前事件类型和标签信息
          EVENT_TYPE="${{ github.event_name }}"
          
          # 设置默认本地标签
          IMAGE_TAG_LOCAL="fastembed-server:local"
          echo "IMAGE_TAG_LOCAL=$IMAGE_TAG_LOCAL" >> $GITHUB_ENV
          
          # 检查DockerHub token是否可用
          if [[ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "DOCKERHUB_CREDENTIALS_AVAILABLE=true" >> $GITHUB_ENV
            
            # 如果是标签触发的构建，则添加版本号标签
            if [[ "$EVENT_TYPE" == "push" && -n "${{ github.ref }}" ]]; then
              # 从标签引用中提取版本号（如从refs/tags/v0.1.0提取v0.1.0）
              TAG_NAME="${GITHUB_REF#refs/tags/}"
              
              # 设置版本标签（只保留带v的标签）
              IMAGE_TAG_VERSION="wildkid1024/fastembed-server:$TAG_NAME"
              
              echo "IMAGE_TAG_VERSION=$IMAGE_TAG_VERSION" >> $GITHUB_ENV
              echo "VERSION_TAG_EXISTS=true" >> $GITHUB_ENV
            else
              # 非标签触发时，设置latest标签
              IMAGE_TAG_LATEST="wildkid1024/fastembed-server:latest"
              echo "IMAGE_TAG_LATEST=$IMAGE_TAG_LATEST" >> $GITHUB_ENV
              echo "VERSION_TAG_EXISTS=false" >> $GITHUB_ENV
            fi
          else
            echo "DOCKERHUB_CREDENTIALS_AVAILABLE=false" >> $GITHUB_ENV
            echo "VERSION_TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # 步骤4：登录到DockerHub（仅当凭证可用时）
      - name: Login to DockerHub
        if: env.DOCKERHUB_CREDENTIALS_AVAILABLE == 'true'
        uses: docker/login-action@v3
        with:
          username: wildkid1024
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤5：构建并推送Docker镜像
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ env.DOCKERHUB_CREDENTIALS_AVAILABLE == 'true' }}
          tags: |
            ${{ env.DOCKERHUB_CREDENTIALS_AVAILABLE == 'true' && env.VERSION_TAG_EXISTS == 'true' && env.IMAGE_TAG_VERSION || '' }}
            ${{ env.DOCKERHUB_CREDENTIALS_AVAILABLE == 'true' && env.VERSION_TAG_EXISTS == 'false' && env.IMAGE_TAG_LATEST || '' }}
          build-args: |
            USE_CUDA=ON
            USE_CUBLAS=OFF
            ENABLE_TESTS=OFF
            ENABLE_SERVER=ON
            CROW_BUILD_EXAMPLES=OFF
            CROW_BUILD_TESTS=OFF

      # 步骤6：显示构建结果信息
      - name: Show build result
        run: |
          if [[ "${{ env.DOCKERHUB_CREDENTIALS_AVAILABLE }}" == "true" ]]; then
            echo "✅ Docker镜像已构建并推送到DockerHub：wildkid1024/fastembed-server"
            
            if [[ "${{ env.VERSION_TAG_EXISTS }}" == "true" ]]; then
              echo "   版本标签：${{ env.IMAGE_TAG_VERSION }}"
            else
              echo "   默认标签：${{ env.IMAGE_TAG_LATEST }}"
            fi
          else
            echo "⚠️ Docker镜像已在本地构建为'${{ env.IMAGE_TAG_LOCAL }}'，但未推送（缺少DockerHub token）"
            echo "要启用推送到DockerHub，请在仓库设置中配置DOCKERHUB_TOKEN密钥"
          fi